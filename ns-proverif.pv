(*
1. A->S: A, B, Na
2. S->A: {Na, Kab, B, {Kab, A}Kbs}Kas
  * A checks that recipient's name natches (B=B)
  * A checks that nonce Na matches
3. A->B: {Kab, a}Kbs
4. B->A: {Nb}Kab
5. A->B: {Nb+1}Kab
  * B checks that nonce Nb matches
*)

free c: channel.

type host.
type key.
free k_res_S: key [private].
free k_ini_S: key [private].
free k_ini_res:key[private].
free A, B: host.



event ini_accept_key(key, host, host).
event res_accept_key(key).
event ini_completes_protocol(key, host, host).
event res_completes_protocol(key, host).
event res_runs_protocol(bitstring, key, host).
event ini_runs_protocol(bitstring).

query k: key, x: bitstring, i:host, r:host; event(ini_completes_protocol(k,i,r))==>event(res_runs_protocol(x, k,i)).
query k: key, i: host, r: host; event(ini_accept_key(k,i,r)) && attacker(k)==>false.
query k: key; event(res_accept_key(k)) && attacker(k)==>false.

    
query k: key, i: host, r: host; inj-event(res_completes_protocol(k,i))==>inj-event(ini_completes_protocol(k,i,r)).
query k: key, i: host, r: host; inj-event(ini_completes_protocol(k,i,r))==>inj-event(res_accept_key( k)).

fun encrypt(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; decrypt(encrypt(m,k),k) = m.

fun modify(bitstring): bitstring.
reduc forall x:bitstring; unmodify(modify(x))=x.

(* ini *)
let initiator(k_ini_S:key, ini: host, res: host) =
  out(c, (ini));
  in(c, mJ: bitstring);

  new n_ini: bitstring;
  out(c, (ini, res, n_ini, mJ));
  in(c, x: bitstring);
  let (=n_ini, received_k_ini_res: key,=res, received_msg_for_responder: bitstring) = decrypt(x, k_ini_S) in

  event ini_accept_key(received_k_ini_res,ini,res);
  event ini_runs_protocol(n_ini);

(*3*)
  out(c, received_msg_for_responder);

(*5*)
  in(c, z: bitstring);
  let received_n_res = decrypt(z, received_k_ini_res) in
  event ini_completes_protocol(received_k_ini_res, ini, res);
  out(c, encrypt(modify(received_n_res), received_k_ini_res)).

let server(k_ini_S:key, k_res_S: key, k_ini_res: key, ini: host, res: host) =
  in(c, (Sini: host, Sres: host, n_ini: bitstring, A_mJ: bitstring));
  if Sini=ini && Sres=res then
  let (received_B_ini: host, received_B_n_J: bitstring) = decrypt(A_mJ, k_res_S) in
  if Sini = received_B_ini then

  let msg_for_responder = encrypt((k_ini_res, ini, received_B_n_J), k_res_S) in
  out(c, encrypt((n_ini, k_ini_res, res, msg_for_responder), k_ini_S)).

(* res *)
let responder(k_res_S:key, res: host) =
  in(c, received_ini: host);
  new n_J: bitstring;
  out(c, encrypt((received_ini, n_J), k_res_S));

  in(c, y: bitstring);
  let (received_k_ini_res: key, received_AS_ini: host, received_n_J: bitstring) = decrypt(y, k_res_S) in
  if received_n_J = n_J then 

  new n_res: bitstring; 
  let E=encrypt(n_res, received_k_ini_res) in
  event res_runs_protocol(E, received_k_ini_res,received_ini);
  out(c, E);

(*5res*)

  in(c, m: bitstring);
  let n_res_modified = decrypt(m, received_k_ini_res) in
  let nB_modified_unmodified = unmodify(n_res_modified) in
  if nB_modified_unmodified = n_res then
  event res_accept_key(received_k_ini_res);
  event res_completes_protocol(received_k_ini_res,received_ini).

process
  
  new A: host;
  new B: host;
  
  (
  (!initiator(k_ini_S, A, B)) | (!server(k_ini_S, k_res_S, k_ini_res, A, B)) | (!responder(k_res_S, B))  
  )
